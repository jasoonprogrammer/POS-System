# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import mysql.connector
import InquireWindow
import CustomWidgets
import SearchWindow
import json
conn = mysql.connector.connect(host = "localhost", user = "root", password = "", database = "test")

c = conn.cursor()


def isFloat(value) -> bool:
    try:
        float(value)
        return True
    except ValueError:
        return False
    
def isInt(value) -> bool:
    try:
        int(value)
        return True
    except ValueError:
        return False


ARROW_UP = 16777235
ARROW_DOWN = 16777237
NUMPAD_PLUS = 43
NUMPAD_MINUS = 45

class CustomTableWidget(QtWidgets.QTableWidget):

    def holdSale(self, **kwargs):
        parent = kwargs['parent']
        rows = self.rowCount()
        if rows > 0:
            buttonReply = QtWidgets.QMessageBox.question(MainWindow, 'Hold this sale?', "Are you sure you want to hold this sale?", QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No, QtWidgets.QMessageBox.No)
            if buttonReply == QtWidgets.QMessageBox.Yes:
                c.execute("INSERT INTO hold (cashier_id) VALUES (1)")
                hold_id = c.lastrowid
                items = []
                for row in range(rows):
                    anon = lambda x: self.item(row, x).text()
                    arr = {"barcode": anon(0), "price": anon(2), "qty": anon(3), "discount": anon(4)}
                    c.execute("SELECT id FROM product WHERE barcode = %s", (anon(0),))
                    product_id = c.fetchone()[0]
                    c.execute("INSERT INTO hold_product (hold_id, product_id, price, quantity, customer_name) VALUES (%s, %s, %s, %s, %s)",
                            (hold_id, product_id, anon(2), anon(3), "Anonymous",))
                conn.commit()
                self.setRowCount(0)
                parent.paymentArea.setText("")
                parent.setOutput()
        else:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setWindowTitle("No items in the table")
            msg.setText("Can't hold a table if it's empty.")
            msg.exec_()
            del msg

    def addQty(self, **kwargs):
        parent = kwargs['parent']
        row = self.currentRow()
        if row >= 0:
            qty = self.item(row, 3).text()
            qty = int(qty)
            qty += 1
            price = self.item(row, 2).text()
            total = float(price) * qty
            total = "{:,.2f}".format(total)
            align = QtCore.Qt.AlignRight|QtCore.Qt.AlignVCenter
            qty_item = QtWidgets.QTableWidgetItem(str(qty))
            qty_item.setTextAlignment(align)
            total_item = QtWidgets.QTableWidgetItem(str(total))
            total_item.setTextAlignment(align)
            self.setItem(row, 3, qty_item)
            self.setItem(row, 5, total_item)
        
        if kwargs['parent']:
            parent.setOutput()

    def subQty(self, **kwargs):
        parent = kwargs['parent']
        row = self.currentRow()
        if row >= 0:
            qty = self.item(row, 3).text()
            qty = int(qty)
            if qty > 1:
                qty -= 1
                price = self.item(row, 2).text()
                total = float(price) * qty
                total = "{:,.2f}".format(total)
                align = QtCore.Qt.AlignRight|QtCore.Qt.AlignVCenter
                qty_item = QtWidgets.QTableWidgetItem(str(qty))
                qty_item.setTextAlignment(align)
                total_item = QtWidgets.QTableWidgetItem(str(total))
                total_item.setTextAlignment(align)
                self.setItem(row, 3, qty_item)
                self.setItem(row, 5, total_item)
        if parent:
            parent.setOutput()


    def keyCapture(self, eve, parent):
        if eve.key() == NUMPAD_PLUS:
            self.addQty()
        elif eve.key() == NUMPAD_MINUS:
            self.subQty()
        if eve.key() == ARROW_UP:
            currentRow = self.currentRow()
            if self.currentRow() < 0:
                self.setCurrentCell(self.rowCount() - 1, 1)
            else:
                self.setCurrentCell(self.currentRow() - 1, 1)
            parent.capturedKeys.clear()
        if eve.key() == ARROW_DOWN:
            row = self.currentRow()
            self.setCurrentCell(row + 1, 1)
            parent.capturedKeys.clear()
        parent.setOutput()
        if eve.key() == QtCore.Qt.Key_Escape:
            parent.barcodeArea.setFocus()
    def addItem(self, barcode, qty, parent):
        
        c.execute("SELECT name, price FROM product WHERE barcode = %s", (barcode,))
        result = c.fetchone()
        if result:
            row = self.rowCount()
            self.setRowCount(row + 1)
            total = qty * result[1]
            arr = [barcode, result[0], "{:,.2f}".format(result[1]), qty, 0, "{:,.2f}".format(total)]
            row_range = list(range(row))
            row_range.reverse()
            for r in row_range:
                for col in range(6):
                    if col == 1:
                        align = QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter
                    else:
                        align = QtCore.Qt.AlignRight|QtCore.Qt.AlignVCenter
                    text = self.item(r, col).text()
                    item = QtWidgets.QTableWidgetItem(str(text))
                    item.setTextAlignment(align)
                    self.setItem(r + 1, col, item)
            for i, col in enumerate(arr):
                if i == 1:
                    align = QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter
                else:
                    align = QtCore.Qt.AlignRight|QtCore.Qt.AlignVCenter
                item = QtWidgets.QTableWidgetItem(str(col))
                item.setTextAlignment(align)
                self.setItem(0, i, item)
            parent.setOutput()
        else:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Information)
            msg.setWindowTitle("Barcode not found")
            msg.setText("No product is registered with this barcode")
            msg.exec_()
            del msg

    def removeItem(self, parent):
        if self.rowCount() > 0:
            if self.currentRow() < 0:
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Information)
                msg.setWindowTitle("No item selected")
                msg.setText("Please select an item.")
                msg.exec_()
                del msg
            else:
                buttonReply = QtWidgets.QMessageBox.question(MainWindow, 'Confirm Void', "Void this product from list?", QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No, QtWidgets.QMessageBox.No)
                if buttonReply == QtWidgets.QMessageBox.Yes:
                    row = self.currentRow()
                    self.removeRow(row)
                    self.clearFocus()
                    parent.barcodeArea.setFocus()
                del buttonReply
        else:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setWindowTitle("No more items")
            msg.setText("Can't remove from an empty table.")
            msg.exec_()
            del msg
       

class Ui_MainWindow(object):

    #start of the MainWindow button functions
    def setOutput(self, *arg):
        subTotals = []
        for i in range(self.productTable.rowCount()):
            subTotal = self.productTable.item(i, 5).text()
            subTotals.append(float(subTotal.replace(",", "")))
        total = sum(subTotals)
        vattable = total / 1.12
        rounded_vattable = round(vattable, 2)
        vat = total - vattable
        payment = self.paymentArea.text()
        if payment == "":
            payment = 0.0
        else:
            payment = float(payment)
        change = payment - total
        self.changeOuput.setText("{:,.2f}".format(change))
        self.totalOutput.setText("{:,.2f}".format(total))
        self.vattableOutput.setText("{:,.2f}".format(vattable))
        self.vatOutput.setText("{:,.2f}".format(vat))

    def setPayment(self, *arg):
        val = self.paymentArea.text()
        if isFloat(val):
            pass
        else:
            self.paymentArea.setText(str(val[:-1]))
        self.setOutput()

    def captureKeyPress(self, eve):
        self.capturedKeys.add(eve.key())
        focused = MainWindow.focusWidget().objectName()
        if eve.key() == ARROW_UP:
            currentRow = self.productTable.currentRow()
            if self.productTable.currentRow() < 0:
                self.productTable.setCurrentCell(self.productTable.rowCount() - 1, 1)
            else:
                self.productTable.setCurrentCell(self.productTable.currentRow() - 1, 1)
            self.capturedKeys.clear()
        if eve.key() == ARROW_DOWN:
            row = self.productTable.currentRow()
            self.productTable.setCurrentCell(row + 1, 1)
            self.capturedKeys.clear()
        if QtCore.Qt.Key_F1 == eve.key():
            self.paymentArea.setFocus()
            self.capturedKeys.clear()
        if QtCore.Qt.Key_F5 == eve.key():
            self.searchProduct()
        if QtCore.Qt.Key_F6 == eve.key():
            InquireWindowDialog.show()

        if QtCore.Qt.Key_F8 == eve.key():
            self.productTable.holdSale(parent = self)
            self.capturedKeys.clear()

        if QtCore.Qt.Key_F9 == eve.key():
            self.productTable.removeItem(self)
            self.capturedKeys.clear()
        
        if QtCore.Qt.Key_F4 == eve.key():
            self.print_receipt()
            self.capturedKeys.clear()

        
        if QtCore.Qt.Key_Return in self.capturedKeys and focused == "barcodeArea":
            code = self.barcodeArea.text()
            code = [x.strip() for x in code.split("*")]
            if len(code) > 1:
                qty = int(code[0])
                barcode = code[1]
            else:
                qty = 1
                barcode = code[0]
            if isInt(barcode):
                self.productTable.addItem(barcode, qty, self)
                self.barcodeArea.setText("")
            else:
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setWindowTitle("Invalid barcode")
                msg.setText("Barcode can only contain numbers")
                msg.exec_()
                del msg
                self.barcodeArea.setText("")
            
            self.capturedKeys.clear()

    def inquire(self):
        InquireWindowDialog.show()
    
    def searchProduct(self, *arg):
        SearchWindowDialog.show()

    def releaseKeyPress(self, eve):
        try:
            self.capturedKeys.remove(eve.key())
        except KeyError:
            pass

    def finish_sale(self):
        rows = self.productTable.rowCount()
        

    def print_receipt(self, *arg):
        change = self.changeOuput.text()
        change = float(change)
        if change > 0:
            pass
        else:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setWindowTitle("Insufficient Amount")
            msg.setText("Please pay sufficient amount.")
            msg.exec_()
            del msg



    #end of the MainWindow button functions

    def setupUi(self, MainWindow):
        self.capturedKeys = set()
        iconSize = (75, 75)
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(1280, 640)
        MainWindow.keyPressEvent = self.captureKeyPress
        MainWindow.keyReleaseEvent = self.releaseKeyPress
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.productTable = CustomTableWidget(self.centralwidget)
        self.productTable.setGeometry(QtCore.QRect(10, 150, 980, 449))
        self.productTable.keyPressEvent = lambda x: self.productTable.keyCapture(x, self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.productTable.sizePolicy().hasHeightForWidth())
        font = QtGui.QFont()
        font.setPointSize(12)
        self.productTable.setFont(font)
        self.productTable.setSizePolicy(sizePolicy)
        self.productTable.setObjectName("productTable")
        self.productTable.setColumnCount(6)
        self.productTable.setColumnWidth(0, 90)
        self.productTable.setColumnWidth(1, 510)
        self.productTable.setColumnWidth(2, 90)
        self.productTable.setColumnWidth(3, 90)
        self.productTable.setColumnWidth(4, 90)
        self.productTable.setColumnWidth(5, 90)
        self.productTable.verticalHeader().hide()
        self.productTable.setSelectionBehavior(QtWidgets.QTableView.SelectRows)
        self.productTable.setSelectionMode(QtWidgets.QTableView.SingleSelection)
        self.productTable.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)
        self.productTable.setHorizontalHeaderLabels(['Barcode', 'Description', 'Price', 'Qty', 'Discount',  'Sub-Total'])
        header = self.productTable.horizontalHeader()
        
        header.setSectionResizeMode(0, QtWidgets.QHeaderView.Fixed)
        header.setSectionResizeMode(1, QtWidgets.QHeaderView.Fixed)
        header.setSectionResizeMode(2, QtWidgets.QHeaderView.Fixed)
        header.setSectionResizeMode(3, QtWidgets.QHeaderView.Fixed)
        header.setSectionResizeMode(4, QtWidgets.QHeaderView.Fixed)
        header.setSectionResizeMode(5, QtWidgets.QHeaderView.Fixed)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 1000, 25))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("padding-left: 10px; padding-top: 5px;")
        self.label.setObjectName("label")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(1100, 150, 171, 281))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.vattableOutput = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.vattableOutput.setFont(font)
        self.vattableOutput.setStyleSheet("margin-right: 5px;")
        self.vattableOutput.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.vattableOutput.setObjectName("vattableOutput")
        self.verticalLayout_2.addWidget(self.vattableOutput)
        self.vatOutput = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.vatOutput.setFont(font)
        self.vatOutput.setStyleSheet("margin-right: 5px;")
        self.vatOutput.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.vatOutput.setObjectName("vatOutput")
        self.verticalLayout_2.addWidget(self.vatOutput)
        self.discountOutput = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.discountOutput.setFont(font)
        self.discountOutput.setStyleSheet("margin-right: 5px;")
        self.discountOutput.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.discountOutput.setObjectName("discountOutput")
        self.verticalLayout_2.addWidget(self.discountOutput)
        self.totalOutput = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.totalOutput.setFont(font)
        self.totalOutput.setStyleSheet("margin-right: 5px;")
        self.totalOutput.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.totalOutput.setObjectName("totalOutput")
        self.verticalLayout_2.addWidget(self.totalOutput)
        self.paymentArea = QtWidgets.QLineEdit(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.paymentArea.sizePolicy().hasHeightForWidth())
        self.paymentArea.setMinimumSize(QtCore.QSize(0, 30))
        self.paymentArea.textChanged.connect(self.setPayment)
        self.paymentArea.setSizePolicy(sizePolicy)
        self.paymentArea.setMinimumSize(QtCore.QSize(0, 30))
        self.paymentArea.returnPressed.connect(self.print_receipt)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.paymentArea.setFont(font)
        self.paymentArea.setStyleSheet("padding-right: 5px;")
        self.paymentArea.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.paymentArea.setObjectName("paymentArea")
        self.verticalLayout_2.addWidget(self.paymentArea)
        self.changeOuput = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.changeOuput.setFont(font)
        self.changeOuput.setStyleSheet("margin-right: 5px;")
        self.changeOuput.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.changeOuput.setObjectName("changeOuput")
        self.verticalLayout_2.addWidget(self.changeOuput)
        self.layoutWidget1 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget1.setGeometry(QtCore.QRect(990, 150, 101, 281))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.varttableLabel = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.varttableLabel.setFont(font)
        self.varttableLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.varttableLabel.setObjectName("varttableLabel")
        self.verticalLayout.addWidget(self.varttableLabel)
        self.vatLabel = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.vatLabel.setFont(font)
        self.vatLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.vatLabel.setObjectName("vatLabel")
        self.verticalLayout.addWidget(self.vatLabel)
        self.discountLabel = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.discountLabel.setFont(font)
        self.discountLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.discountLabel.setObjectName("discountLabel")
        self.verticalLayout.addWidget(self.discountLabel)
        self.totalLabel = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.totalLabel.setFont(font)
        self.totalLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.totalLabel.setObjectName("totalLabel")
        self.verticalLayout.addWidget(self.totalLabel)
        self.paymentLabel = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.paymentLabel.setFont(font)
        self.paymentLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.paymentLabel.setObjectName("paymentLabel")
        self.verticalLayout.addWidget(self.paymentLabel)
        self.changeLabel = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.changeLabel.setFont(font)
        self.changeLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.changeLabel.setObjectName("changeLabel")
        self.verticalLayout.addWidget(self.changeLabel)
        self.barcodeArea = QtWidgets.QLineEdit(self.centralwidget)
        self.barcodeArea.setGeometry(QtCore.QRect(10, 110, 981, 31))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        self.barcodeArea.setFont(font)
        self.barcodeArea.setStyleSheet("padding-left: 5px;")
        self.barcodeArea.setText("")
        self.barcodeArea.setObjectName("barcodeArea")
        self.messageBox = QtWidgets.QLabel(self.centralwidget)
        self.messageBox.setGeometry(QtCore.QRect(992, 432, 280, 162))
        self.messageBox.setMinimumSize(QtCore.QSize(280, 162))
        self.messageBox.setMaximumSize(QtCore.QSize(275, 162))
        self.messageBox.setBaseSize(QtCore.QSize(100, 100))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.messageBox.setFont(font)
        self.messageBox.setStyleSheet("background-color: white; border: 1px dashed black")
        self.messageBox.setAlignment(QtCore.Qt.AlignCenter)
        self.messageBox.setObjectName("messageBox")
        self.splitter = QtWidgets.QSplitter(self.centralwidget)
        self.splitter.setGeometry(QtCore.QRect(10, 30, 1195, 75))
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.tender_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Tender_Cash.png", iconSize, "tender_button")
        self.discount_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Discount.png", iconSize, "discount_button")
        self.taxExcempt_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Tax_Excempt.png", iconSize, "taxExcempt_button")
        self.print_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Print_Receipt.png", iconSize, "print_button")
        self.search_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Search.png", iconSize, "search_button")
        self.search_button.mousePressEvent = self.searchProduct
        self.inquire_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Inquire.png", iconSize, 'inquire_button')
        self.inquire_button.mousePressEvent = lambda x: InquireWindowDialog.show()
        self.search_hold_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Search_Hold.png", iconSize, "search_hold_button")
        self.hold_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Hold_Sale.png", iconSize, "hold_button")
        self.hold_button.mousePressEvent = lambda x: self.productTable.holdSale(parent = self)
        self.remove_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Remove_Item.png", iconSize, "remove_button")
        self.remove_button.mousePressEvent = lambda x: self.productTable.removeItem(self)
        self.void_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Void_Transaction.png", iconSize, "void_button")
        self.returnProduct_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Return_Product.png", iconSize, "returnProduct_button")
        self.change_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Change_Price.png", iconSize, "change_button")
        self.add_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Increase_Qty.png", iconSize, "add_button")
        self.add_button.mousePressEvent = lambda x: self.productTable.addQty(parent = self)
        self.sub_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Decrease_Qty.png", iconSize, "sub_button")
        self.sub_button.mousePressEvent = lambda x: self.productTable.subQty(parent = self)
        self.logout_button = CustomWidgets.HoverLabel(self.splitter, "QtIcons/Logout.png", iconSize, "logout_button")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1280, 21))
        self.menubar.setStyleSheet("background-color: #f4f4f4;")
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuViews = QtWidgets.QMenu(self.menubar)
        self.menuViews.setObjectName("menuViews")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionReports = QtWidgets.QAction(MainWindow)
        self.actionReports.setObjectName("actionReports")
        self.actionTransaction = QtWidgets.QAction(MainWindow)
        self.actionTransaction.setObjectName("actionTransaction")
        self.actionExit_F4 = QtWidgets.QAction(MainWindow)
        self.actionExit_F4.setObjectName("actionExit_F4")
        self.menuFile.addAction(self.actionExit_F4)
        self.menuViews.addAction(self.actionReports)
        self.menuViews.addAction(self.actionTransaction)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuViews.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.paymentArea, self.barcodeArea)
        MainWindow.setTabOrder(self.barcodeArea, self.productTable)
        self.barcodeArea.setFocus()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "POS System - Cashier - Branch"))
        self.vattableOutput.setText(_translate("MainWindow", "0.00"))
        self.vatOutput.setText(_translate("MainWindow", "0.00"))
        self.discountOutput.setText(_translate("MainWindow", "0.00"))
        self.totalOutput.setText(_translate("MainWindow", "0.00"))
        self.paymentArea.setPlaceholderText(_translate("MainWindow", "0.00"))
        self.changeOuput.setText(_translate("MainWindow", "0.00"))
        self.varttableLabel.setText(_translate("MainWindow", "Vattable:"))
        self.vatLabel.setText(_translate("MainWindow", "Vat (12%):"))
        self.discountLabel.setText(_translate("MainWindow", "Discount:"))
        self.totalLabel.setText(_translate("MainWindow", "Total:"))
        self.paymentLabel.setText(_translate("MainWindow", "Payment:"))
        self.changeLabel.setText(_translate("MainWindow", "Change:"))
        self.barcodeArea.setPlaceholderText(_translate("MainWindow", "Qty*Barcode"))
        self.messageBox.setText(_translate("MainWindow", "Message Box Here"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuViews.setTitle(_translate("MainWindow", "View"))
        self.actionReports.setText(_translate("MainWindow", "Reports"))
        self.actionTransaction.setText(_translate("MainWindow", "Transactions"))
        self.actionExit_F4.setText(_translate("MainWindow", "Exit (F4)"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    MainWindow_ui = Ui_MainWindow()
    MainWindow_ui.setupUi(MainWindow)
    MainWindow.show()
    InquireWindowDialog = QtWidgets.QDialog()
    InquireWindowDialog.setWindowModality(QtCore.Qt.ApplicationModal)
    InquireWindow_ui = InquireWindow.Ui_Dialog()
    InquireWindow_ui.setupUi(InquireWindowDialog, c)
    SearchWindowDialog = QtWidgets.QWidget()
    SearchWindowDialog.setWindowModality(QtCore.Qt.ApplicationModal)
    SearchWindow_ui = SearchWindow.Ui_Form()
    SearchWindow_ui.setupUi(SearchWindowDialog, c, MainWindow_ui)
    sys.exit(app.exec_())
